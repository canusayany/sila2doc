//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tecan.Sila2;


namespace Sila2Client
{
    
    
    /// <summary>
    /// Data transfer object for the request of the Control Temperature command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ControlTemperatureRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.RealDto _targetTemperature;
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public ControlTemperatureRequestDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        /// <param name="targetTemperature">        The target temperature that the server will try to reach.        Note that the command might be completed at a temperature that it evaluates to be close enough.        If the temperature cannot be reached, a 'Temperature Not Reachable' error will be thrown.      </param>
        public ControlTemperatureRequestDto(double targetTemperature, Tecan.Sila2.IBinaryStore store)
        {
            TargetTemperature = new Tecan.Sila2.RealDto(targetTemperature, store);
        }
        
        /// <summary>
        /// The target temperature that the server will try to reach.        Note that the command might be completed at a temperature that it evaluates to be close enough.        If the temperature cannot be reached, a 'Temperature Not Reachable' error will be thrown.
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.RealDto TargetTemperature
        {
            get
            {
                return _targetTemperature;
            }
            set
            {
                _targetTemperature = value;
            }
        }
        
        /// <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "org.silastandard/examples/TemperatureController/v1/Command/ControlTemperature";
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
            Argument.Validate(TargetTemperature, "targetTemperature");
            if ((TargetTemperature.Value <= 277D))
            {
                throw new ArgumentException(string.Format("TargetTemperature should have been at least more than 277.0 but was \'{0}\'", TargetTemperature.Value), "targetTemperature");
            }
            if ((TargetTemperature.Value > 363D))
            {
                throw new ArgumentException(string.Format("TargetTemperature should have been at most 363.0 but was \'{0}\'", TargetTemperature.Value), "targetTemperature");
            }
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            string errors = ("" + Argument.Require(TargetTemperature, "targetTemperature"));
            if ((TargetTemperature.Value <= 277D))
            {
                errors = (errors + string.Format("TargetTemperature should have been at least more than 277.0 but was \'{0}\'", TargetTemperature.Value));
            }
            if ((TargetTemperature.Value > 363D))
            {
                errors = (errors + string.Format("TargetTemperature should have been at most 363.0 but was \'{0}\'", TargetTemperature.Value));
            }
            return errors;
        }
    }
    
    /// <summary>
    /// Data transfer object for the request of the Switch Device State command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class SwitchDeviceStateRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.BooleanDto _isOn;
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public SwitchDeviceStateRequestDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        /// <param name="isOn">Switch device state to isOn state.</param>
        public SwitchDeviceStateRequestDto(bool isOn, Tecan.Sila2.IBinaryStore store)
        {
            IsOn = new Tecan.Sila2.BooleanDto(isOn, store);
        }
        
        /// <summary>
        /// Switch device state to isOn state.
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.BooleanDto IsOn
        {
            get
            {
                return _isOn;
            }
            set
            {
                _isOn = value;
            }
        }
        
        /// <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "org.silastandard/examples/TemperatureController/v1/Command/SwitchDeviceState";
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
            Argument.Validate(IsOn, "isOn");
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return ("" + Argument.Require(IsOn, "isOn"));
        }
    }
    
    /// <summary>
    /// Data transfer object to encapsulate the response of the Current Temperature property
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class CurrentTemperatureResponseDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private Tecan.Sila2.RealDto _value;
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public CurrentTemperatureResponseDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public CurrentTemperatureResponseDto(double value, Tecan.Sila2.IBinaryStore store)
        {
            Value = new Tecan.Sila2.RealDto(value, store);
        }
        
        /// <summary>
        /// The  property
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.RealDto Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
            Argument.Validate(Value, "value");
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return ("" + Argument.Require(Value, "value"));
        }
    }
}
