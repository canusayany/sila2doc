//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace Sila2Client
{
    
    
    /// <summary>
    /// Class that implements the ITemperatureController interface through SiLA2
    /// </summary>
    public partial class TemperatureControllerClient : ITemperatureController, System.ComponentModel.INotifyPropertyChanged, System.IDisposable
    {
        
        private double _currentTemperature;
        
        private System.Threading.Tasks.Task _currentTemperatureUpdateTask;
        
        private System.Lazy<bool> _deviceState;
        
        private System.Threading.CancellationTokenSource _cancellationTokenSource = new System.Threading.CancellationTokenSource();
        
        private IClientExecutionManager _executionManager;
        
        private IClientChannel _channel;
        
        private const string _serviceName = "sila2.org.silastandard.examples.temperaturecontroller.v1.TemperatureController";
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="channel">The channel through which calls should be executed</param>
        /// <param name="executionManager">A component to determine metadata to attach to any requests</param>
        public TemperatureControllerClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            _executionManager = executionManager;
            _channel = channel;
            InitLazyRequests();
        }
        
        /// <summary>
        /// The current temperature as measured by the controller.
        /// </summary>
        public virtual double CurrentTemperature
        {
            get
            {
                if ((_currentTemperatureUpdateTask == null))
                {
                    try
                    {
                        System.Threading.Monitor.Enter(_cancellationTokenSource);
                        if ((_currentTemperatureUpdateTask == null))
                        {
                            _currentTemperatureUpdateTask = _channel.SubscribeProperty<CurrentTemperatureResponseDto>(_serviceName, "CurrentTemperature", "org.silastandard/examples/TemperatureController/v1/Property/CurrentTemperature", ReceiveNewCurrentTemperature, _executionManager.CreateCallOptions("org.silastandard/examples/TemperatureController/v1/Property/CurrentTemperature"), _cancellationTokenSource.Token);
                        }
                    } finally
                    {
                        System.Threading.Monitor.Exit(_cancellationTokenSource);
                    }
                }
                return _currentTemperature;
            }
        }
        
        /// <summary>
        /// The current state of the device, either On or Off.
        /// </summary>
        public virtual bool DeviceState
        {
            get
            {
                return _deviceState.Value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        private void ReceiveNewCurrentTemperature(CurrentTemperatureResponseDto currentTemperature)
        {
            double inner = currentTemperature.Value.Extract(_executionManager.DownloadBinaryStore);
            if ((_currentTemperature != inner))
            {
                _currentTemperature = inner;
                System.ComponentModel.PropertyChangedEventHandler handler = PropertyChanged;
                if ((handler != null))
                {
                    handler.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs("CurrentTemperature"));
                }
            }
        }
        
        private bool RequestDeviceState()
        {
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("org.silastandard/examples/TemperatureController/v1/Property/DeviceState");
            try
            {
                bool response = _channel.ReadProperty<PropertyResponse<Tecan.Sila2.BooleanDto>>(_serviceName, "DeviceState", "org.silastandard/examples/TemperatureController/v1/Property/DeviceState", callInfo).Value.Extract(_executionManager.DownloadBinaryStore);
                callInfo.FinishSuccessful();
                return response;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        /// <summary>
        /// Disposes the current client and cancels all subscriptions
        /// </summary>
        public void Dispose()
        {
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }
        
        /// <summary>
        /// Initializes lazies for non-observable properties.
        /// </summary>
        private void InitLazyRequests()
        {
            _deviceState = new System.Lazy<bool>(RequestDeviceState);
        }
        
        /// <summary>
        /// Control the temperature gradually to a set target.      It is RECOMMENDED to use an oscillation free control system.
        /// </summary>
        /// <param name="targetTemperature">The target temperature that the server will try to reach.        Note that the command might be completed at a temperature that it evaluates to be close enough.        If the temperature cannot be reached, a 'Temperature Not Reachable' error will be thrown.</param>
        public virtual Tecan.Sila2.IObservableCommand ControlTemperature(double targetTemperature)
        {
            ControlTemperatureRequestDto request = new ControlTemperatureRequestDto(targetTemperature, null);
            request.Validate();
            return _channel.ExecuteObservableCommand<ControlTemperatureRequestDto>(_serviceName, "ControlTemperature", request, ConvertControlTemperatureException, _executionManager.CreateCallOptions(request.CommandIdentifier));
        }
        
        /// <summary>
        /// Converts the error ocurred during execution of ControlTemperature to a proper exception
        /// </summary>
        /// <param name="errorIdentifier">The identifier of the error that has happened</param>
        /// <param name="errorMessage">The original error message from the server</param>
        /// <returns>The converted exception or null, if the error is not understood</returns>
        private static System.Exception ConvertControlTemperatureException(string errorIdentifier, string errorMessage)
        {
            if ((errorIdentifier == "org.silastandard/examples/TemperatureController/v1/DefinedExecutionError/Temperat" +
                "ureNotReachable"))
            {
                return new TemperatureNotReachableException(errorMessage);
            }
            if ((errorIdentifier == "org.silastandard/examples/TemperatureController/v1/DefinedExecutionError/ControlI" +
                "nterrupted"))
            {
                return new ControlInterruptedException(errorMessage);
            }
            return null;
        }
        
        /// <summary>
        /// Switch device state from On to Off, or from Off to On.
        /// </summary>
        /// <param name="isOn">Switch device state to isOn state.</param>
        public virtual void SwitchDeviceState(bool isOn)
        {
            SwitchDeviceStateRequestDto request = new SwitchDeviceStateRequestDto(isOn, null);
            request.Validate();
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("org.silastandard/examples/TemperatureController/v1/Command/SwitchDeviceState");
            try
            {
                _channel.ExecuteUnobservableCommand<SwitchDeviceStateRequestDto>(_serviceName, "SwitchDeviceState", request, callInfo);
                callInfo.FinishSuccessful();
                return;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        private T Extract<T>(Tecan.Sila2.ISilaTransferObject<T> dto)
        
        {
            return dto.Extract(_executionManager.DownloadBinaryStore);
        }
    }
    
    /// <summary>
    /// Factory to instantiate clients for the Temperature Controller.
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IClientFactory))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class TemperatureControllerClientFactory : IClientFactory
    {
        
        /// <summary>
        /// Gets the fully-qualified identifier of the feature for which clients can be generated
        /// </summary>
        public string FeatureIdentifier
        {
            get
            {
                return "org.silastandard/examples/TemperatureController/v1";
            }
        }
        
        /// <summary>
        /// Gets the interface type for which clients can be generated
        /// </summary>
        public System.Type InterfaceType
        {
            get
            {
                return typeof(ITemperatureController);
            }
        }
        
        /// <summary>
        /// Creates a strongly typed client for the given execution channel and execution manager
        /// </summary>
        /// <param name="channel">The channel that should be used for communication with the server</param>
        /// <param name="executionManager">The execution manager to manage metadata</param>
        /// <returns>A strongly typed client. This object will be an instance of the InterfaceType property</returns>
        public object CreateClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            return new TemperatureControllerClient(channel, executionManager);
        }
    }
}

